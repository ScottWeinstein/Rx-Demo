<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive.Windows.Threading</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Linq.DispatcherObservable">
            <summary>
            Provides a set of static methods for subscribing to IObservables using Dispatchers.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Asynchronously notify observers using the dispatcher.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to to notify observers on.</param>
            <returns>Source sequence whose observations happen on the message loop associated with the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Asynchronously subscribes and unsubscribes observers using the dispatcher.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="dispatcher">Dispatcher whose associated message loop is used to to perform subscription and unsubscription actions on.</param>
            <returns>Source sequence whose subscriptions and unsubscriptions happen on the message loop associated with the specified dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.DispatcherScheduler)">
            <summary>
            Asynchronously notify observers on the specified dispatcher scheduler.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="scheduler">Dispatcher scheduler to notify observers on.</param>
            <returns>Source sequence whose observations happen on the specified dispatcher scheduler.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.ObserveOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously notify observers using the dispatcher associated with the current thread.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>Source sequence whose observations happen on the current thread's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the dispatcher associated with the current thread.
            </summary>
            <param name="source">Source sequence.</param>
            <returns>Source sequence whose subscriptions and unsubscriptions happen on the current thread's dispatcher.</returns>
        </member>
        <member name="M:System.Reactive.Linq.DispatcherObservable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.DispatcherScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the specified dispatcher scheduler.
            </summary>
            <param name="source">Source sequence.</param>
            <param name="scheduler">Dispatcher scheduler to perform subscription and unsubscription actions on.</param>
            <returns>Source sequence whose subscriptions and unsubscriptions happen on the specified dispatcher scheduler.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.DispatcherScheduler">
            <summary>
            Represents an object that schedules units of work on a Dispatcher.
            </summary>
            <seealso cref="M:Observable.ObserveOnDispatcher">This scheduler type is typically used indirectly through the ObserveOnDispatcher method that uses the current Dispatcher.</seealso>
            <seealso cref="M:Observable.SubscribeOnDispatcher">This scheduler type is typically used indirectly through the SubscribeOnDispatcher method that uses the current Dispatcher.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.DispatcherScheduler.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Constructs an DispatcherScheduler that schedules units of work on dispatcher.
            </summary>
            <param name="dispatcher">Dispatcher to schedule work on.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.DispatcherScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed on the dispatcher.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>Disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.DispatcherScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime on the dispatcher, using a DispatcherTimer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>Disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.DispatcherScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime on the dispatcher, using a DispatcherTimer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>Disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.DispatcherScheduler.Instance">
            <summary>
            Gets the scheduler that schedules work on the current Dispatcher.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.DispatcherScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.DispatcherScheduler.Dispatcher">
            <summary>
            Gets the dispatcher associated with the DispatcherScheduler.
            </summary>
        </member>
    </members>
</doc>
